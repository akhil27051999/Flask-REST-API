# Namespaces
apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets
---
apiVersion: v1
kind: Namespace
metadata:
  name: student-api
---

# ServiceAccount for ESO
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets
  namespace: external-secrets
---

# ClusterRole for ESO
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-cluster-role
rules:
  - apiGroups: [""]
    resources: ["secrets", "namespaces"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["external-secrets.io"]
    resources: ["secretstores", "clustersecretstores", "externalsecrets", "clusterexternalsecrets", "pushsecrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list"]
---

# ClusterRoleBinding for ESO
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-cluster-role
subjects:
  - kind: ServiceAccount
    name: external-secrets
    namespace: external-secrets
---

# Vault token secret (in external-secrets namespace)
apiVersion: v1
kind: Secret
metadata:
  name: vault-token
  namespace: external-secrets
type: Opaque
stringData:
  token: {{ VAULT_TOKEN }}  # Replace with your actual Vault token
---

# ESO deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-secrets-operator
  namespace: external-secrets
spec:
  replicas: 1
  selector:
    matchLabels:
      app: external-secrets
  template:
    metadata:
      labels:
        app: external-secrets
    spec:
      serviceAccountName: external-secrets
      containers:
        - name: external-secrets-operator
          image: ghcr.io/external-secrets/external-secrets:v0.9.9
          imagePullPolicy: IfNotPresent
---

# ClusterSecretStore pointing to Vault
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: vault-backend
spec:
  provider:
    vault:
      server: "http://vault-service.vault.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        tokenSecretRef:
          name: "vault-token"
          key: "token"
          namespace: "external-secrets"
---

# ExternalSecret pulling Postgres credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: studentdb-secrets
  namespace: student-api
spec:
  refreshInterval: "1h"
  secretStoreRef:
    name: "vault-backend"
    kind: "ClusterSecretStore"
  target:
    name: "studentdb-credentials"
    creationPolicy: "Owner"
  data:
    - secretKey: "POSTGRES_USER"
      remoteRef:
        key: "studentdb"
        property: "POSTGRES_USER"
    - secretKey: "POSTGRES_PASSWORD"
      remoteRef:
        key: "studentdb"
        property: "POSTGRES_PASSWORD"