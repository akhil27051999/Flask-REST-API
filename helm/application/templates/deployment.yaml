apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-api
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: flask-api
  template:
    metadata:
      labels:
        app: flask-api
    spec:
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      initContainers:
        - name: db-migrations
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          workingDir: /api/app
          env:
            - name: FLASK_APP
              value: "wsgi.py"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: {{ .Values.database.usernameKey }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: {{ .Values.database.passwordKey }}
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  name: flask-config
                  key: POSTGRES_HOST
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  name: flask-config
                  key: POSTGRES_PORT
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: flask-config
                  key: POSTGRES_DB
          command:
            - sh
            - -c
            - |
              echo "Waiting for Postgres at $POSTGRES_HOST:$POSTGRES_PORT..."
              until pg_isready -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER; do
                sleep 2
              done
              echo "Postgres is ready, running migrations..."
              flask db upgrade
      containers:
        - name: flask-api
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.targetPort }}
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: {{ .Values.database.usernameKey }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: {{ .Values.database.passwordKey }}
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  name: flask-config
                  key: POSTGRES_HOST
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  name: flask-config
                  key: POSTGRES_PORT
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: flask-config
                  key: POSTGRES_DB
